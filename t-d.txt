# what2wear MVP - Task Dependency List

This document outlines the tasks required to build the Minimum Viable Product (MVP) for the StyleMate application. Tasks are organized into phases, and each task should be completed in order.

Status Key:
- [DONE]: Task is complete.
- [TODO]: Task is pending.
- [WIP]: Task is in progress.

---

### Phase 0: Project Foundation & Setup

1.  **[DONE]** Initialize Next.js project with TypeScript and Tailwind CSS.
2.  **[DONE]** Configure Supabase backend (Database, Auth, Storage).
3.  **[DONE]** Implement user authentication (Sign up, Sign in, OAuth, Sign out).
4.  **[DONE]** Initialize Git and create GitHub repository.

---

### Phase 1: Core Wardrobe Management

5.  **[DONE]** Database Schema: Define and create the necessary tables (`ClothingItem`, `Outfit`, `UserProfile`) in Supabase based on the PRD data model.
6.  **[DONE]** Wardrobe UI: Create a dedicated page (`/wardrobe`) to display the user's clothing items in a grid format.
7.  **[DONE]** Image Upload Logic: Implement the function to upload a clothing image file to Supabase Storage and retrieve its URL.
8.  **[DONE]** Item Creation UI & Form: Build a form where users can upload an image and manually enter initial details for a new clothing item.
9.  **[DONE]** AI Categorization Endpoint: Create a server-side endpoint that receives an image URL, calls the Gemini API to analyze the clothing item (determining category, color, season, style), and returns the data.
10. **[DONE]** Integrate AI Categorization: Connect the item creation form to the AI endpoint. After an image is uploaded, automatically send the URL to the endpoint and populate the form with the AI-generated tags.
11. **[DONE]** Save Item to Database: Save the new clothing item, including its image URL and all its tags (AI-generated or manually corrected), to the `ClothingItem` table.
12. **[DONE]** Item Details & Edit UI: Create a view to see all details of a specific clothing item and allow the user to edit/correct the tags.

---

### Phase 2: Daily Outfit Recommendations

13. **[DONE]** Recommendation Engine Endpoint: Create a server-side endpoint that:
    a. Fetches all of the user's clothing items from the database.
    b. Calls the Gemini API with the clothing data, user preferences, and context (e.g., season) to receive a recommended outfit (a combination of `ClothingItem` IDs).
14. **[DONE]** Daily Outfit UI: Create a component on the main dashboard to display the outfit recommendation for the day, showing the images of the selected items.
15. **[DONE]** Scheduler for Recommendations: Set up a daily scheduled job (e.g., using Supabase Edge Functions or a similar cron-like service) that runs the recommendation engine for every active user.
16. **[DONE]** Save Recommended Outfit: Store the generated outfit combination in the `Outfit` table for the user for that day.

---

### Phase 3: Virtual Try-On (Visuals)

17. **[DONE]** User Avatar Upload UI: Create a section in the user profile for uploading a full-body photo.
18. **[DONE]** Avatar Generation Endpoint: Create a server-side endpoint that calls the specified Google image model (`models/gemini-2.5-flash-image`) to process the user's photo and create a clean avatar.
19. **[DONE]** Outfit Rendering Endpoint: Create a server-side endpoint that takes the user's avatar and the recommended outfit items, and a "try-on" image.
20. **[DONE]** Display Rendered Outfit: Integrate the rendered image into the daily outfit UI, showing the user's avatar wearing the recommended clothes.

---

### Phase 4: User Feedback Loop

21. **[DONE]** Feedback UI: Add simple "Like" and "Dislike" buttons to the daily outfit display.
22. **[DONE]** Store Feedback: When a user clicks a feedback button, update the corresponding record in the `Outfit` table with their rating.
23. **[DONE]** Evolve Recommendations: Enhance the recommendation engine endpoint (Task 13) to include the user's past feedback (likes/dislikes) in the data sent to the Gemini API, allowing for more personalized future recommendations.

---

### Phase 5: UI/UX Modernization & Feature Completion

This phase focuses on elevating the user experience by incorporating modern UI/UX trends and implementing missing core features.

24. **[DONE]** **UI/UX Research & Style Guide:**
    - Research and define a new visual style guide (colors, typography, spacing, component design).
    - Create a reference document for the new design system.

25. **[DONE]** **Implement Core Missing Features:**
    - **[DONE]** **Profile Preferences:** Create UI for users to set their style preferences.
    - **[DONE]** **Clothing Item Deletion:** Implement functionality to delete items from the wardrobe.
    - **[DONE]** **Outfit History:** Create a page to view past recommended outfits and feedback.
    - **[DONE]** **Manual Outfit Creation:** Allow users to create and save their own outfits.
    - **[DONE]** **Display "Last Worn" Date:** Show the `last_used_date` on item views.

26. **[DONE]** **Implement Modern UI/UX Patterns:**
    - **[DONE]** **Dark Mode:** The application is dark mode by default.
    - **[DONE]** **Microinteractions & Animations:** Implement subtle animations and transitions for buttons, modals, and page loads.
    - **[DONE]** **Redesign Wardrobe UI:**
        - Implement a more dynamic and interactive grid for clothing items.
        - Add advanced filtering and sorting options.
        - Implement swipe gestures for quick actions (e.g., delete).
    - **[DONE]** **Redesign Outfit Recommendation UI:**
        - Present recommendations in a more engaging format (e.g., card stack).
        - Animate the presentation of the outfit.

27. **[TODO]** **Advanced Features & Interactivity:**
    - **[TODO]** **Gamify the Experience:** Add badges and rewards for user engagement (e.g., adding items, trying new styles).
    - **[TODO]** **AR Virtual Try-On:** Investigate and implement a more immersive AR-based virtual try-on.
    - **[TODO]** **Voice UI:** Explore adding voice commands for key actions (e.g., "show me a casual outfit").